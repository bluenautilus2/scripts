#!/usr/bin/perl

use strict;

print "args: 1) search phrase to find with ps -ef \n";
print "args example: befKill GradleDaemon\n"; 

my $phrase = $ARGV[0];

if(!$phrase){
  print "You must specify a search phrase\n";
  exit 1;
}

$phrase =~ s/\./\\./g;

print "\n";
print "Phrase regex: ".$phrase."\n";

if(!$phrase){
   exit 1;
}

print "Executing.. this pid: ".$$."\n";

my $cmd1 = "ps -ef | grep ".$phrase;
my @procs = `$cmd1`;

my $procnum = scalar @procs;
print " Processes Found ".($procnum-3)."\n\n";

sub isRoot{
  my $currentPid = $_[0];
  my @list = @_[1..$#_];

  #print "current: ".$currentPid."\n";
 
  if($$ == $currentPid){
    return 1;
  }
  
  my $parentPid = 0;
  foreach my $i(@list){
#    print "pids seen: ---".@$i[0].",".@$i[1]."---\n\n"; 
    if($currentPid==@$i[0]){
        $parentPid = @$i[1];
    }
  } 

  if($parentPid!=0){
     return isRoot($parentPid,@list);
  } else {
     return 0;
  }
}

my @pidlist;
my $count = 0;
@procs = @procs[ 0 .. ($#procs-3)];
foreach my $proc(@procs){
    my $printy = substr($proc, 0, 256);
    print $printy."\n";    
    $count++;
    my @numbers = split(/\s+/,$proc);
    $pidlist[$count][0] = $numbers[2];
    $pidlist[$count][1] = $numbers[3]; 
}
print "\n\n";

#@pidlist = reverse @pidlist;
shift(@pidlist);

foreach my $pidArr(@pidlist){
  if(!isRoot(@$pidArr[0], @pidlist)){
    
    print "Kill this process? N for no, other for yes: ".@$pidArr[0]."\n"; 
    my $kill = <STDIN>;
    if(($kill ne "n") && ($kill ne "N")){
        my $cmd = "kill ".@$pidArr[0];
        `$cmd` 
    } 
  } 
}
 
